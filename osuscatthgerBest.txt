export OSUScatter

struct OSUScatter <: MPIBenchmark
    conf::Configuration
    name::String
end

function OSUScatter(T::Type=Float32;
                   filename::Union{String,Nothing}="julia_osu_scatter.csv",
                   kwargs...,
                   )
    return OSUScatter(
        Configuration(T; filename, max_size=2 ^ 20, kwargs...),
        "OSU Scatter",
    )
end

function osu_scatter(T::Type, bufsize::Int, iters::Int, comm::MPI.Comm)
    println("mpi sca1")
    rank = MPI.Comm_rank(comm)
    nranks = MPI.Comm_size(comm)
    send_buffer = ones(T, bufsize * nranks)
    recv_buffer = zeros(T, bufsize)
    root = 0
    timer = 0.0

    if(rank == 0)
        #println("counts: ", counts)
        println("nranks or comm_size", nranks)
        println("see cal ", bufsize * nranks)

        println("-----------------")
        println("see cal T:  ", T)
        println("see cal bufsize: ", bufsize)
        println("see cal iters: ", iters)
        println("see cal comm: ", comm)
        println("see cal send_buffer: ", send_buffer)
        println("see cal recv_buffer: ", recv_buffer)
        #println("//////////////////////////")
        #a = UBuffer(recv_buffer, bufsize , nothing , MPI.Datatype(T))
        #b = UBuffer(recv_buffer, Cint(bufsize) , nranks , MPI.Datatype(T))
        #println(a)
        #println(b)
        #println("//////////////////////////")
        println("-----------------")
    end


    MPI.Barrier(comm)
    for _ in 1:1
        tic = MPI.Wtime()
        if rank == root   
            #Great#MPI.Gather!(MPI.IN_PLACE, UBuffer(recv_buffer, bufsize , nothing , MPI.Datatype(Float32)), comm; root)
            #MPI.Gather!(MPI.IN_PLACE, UBuffer(recv_buffer, Cint(bufsize) , nranks , MPI.Datatype(T)), comm; root)
            #println(UBuffer(recv_buffer, bufsize , 1 , MPI.Datatype(Float32)))
            MPI.Scatter!(UBuffer(send_buffer, Cint(bufsize), nranks,MPI.Datatype(Float32)), recv_buffer, comm; root=root)
        else
            MPI.Scatter!(nothing, recv_buffer, comm; root=root)
            #MPI.Gather!(nothing, buf, comm; root=root)
        end
        toc = MPI.Wtime()
        timer += toc - tic
    end
    MPI.Barrier(comm)
    if(bufsize == 16)
        if rank == root   
            println("Result:root : ", recv_buffer )
        elseif rank == 1
            println("Result:1 : ", recv_buffer )
        elseif rank == 2
            println("Result:2 : ", recv_buffer )
        elseif rank == 3
            println("Result:3 : ", recv_buffer )
        end
    end
    avgtime = timer / iters
    return avgtime
end

benchmark(bench::OSUScatter) = run_osu_collective(bench, osu_scatter, bench.conf)